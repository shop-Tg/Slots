import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from config import BOT_TOKEN, SPIN_COST, GIFTS, WEBAPP_URL, WELCOME_MESSAGE, SPIN_REQUEST_MESSAGE, INSUFFICIENT_FUNDS, SPINNING_MESSAGE, WIN_MESSAGE, SOLD_MESSAGE, KEPT_MESSAGE
from database import db

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.create_user(user.id, user.username or str(user.id))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!", callback_data="spin")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üåê –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            text=WELCOME_MESSAGE,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"Error in start handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def spin_roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É'"""
    try:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        if not user:
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user['stars'] < SPIN_COST:
            await query.message.reply_text(INSUFFICIENT_FUNDS.format(SPIN_COST))
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_spin_{SPIN_COST}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_spin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            SPIN_REQUEST_MESSAGE.format(SPIN_COST),
            reply_markup=reply_markup
        )
    except Exception as e:
        print(f"Error in spin_roulette handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_spin_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        if query.data == "cancel_spin":
            keyboard = [
                [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!", callback_data="spin")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text("‚ùå –í—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=reply_markup)
            return
            
        user_id = query.from_user.id
        action, amount = query.data.split('_')[1:]
        amount = int(amount)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user = await db.get_user(user_id)
        if not user or user['stars'] < amount:
            await query.message.reply_text(INSUFFICIENT_FUNDS.format(amount))
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        await db.update_stars(user_id, -amount)
        await db.add_transaction(user_id, -amount, "spin_cost")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        await query.message.edit_text(SPINNING_MESSAGE)
        await asyncio.sleep(2)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        total_weight = sum(gift["weight"] for gift in GIFTS)
        random_value = random.randint(1, total_weight)
        current_weight = 0
        
        for gift in GIFTS:
            current_weight += gift["weight"]
            if random_value <= current_weight:
                won_gift = gift
                break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = [
            [
                InlineKeyboardButton("üíù –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"keep_{won_gift['value']}"),
                InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{won_gift['value']}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            WIN_MESSAGE.format(won_gift['name']),
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.update_game_stats(user_id, won_gift['value'])
        
    except Exception as e:
        print(f"Error in handle_spin_confirmation handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_gift_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ"""
    try:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        user_id = query.from_user.id
        action, value = query.data.split('_')
        value = int(value)
        
        if action == "sell":
            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã
            await db.update_stars(user_id, value)
            await db.add_transaction(user_id, value, "gift_sold")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É —Å–Ω–æ–≤–∞!", callback_data="spin")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                SOLD_MESSAGE.format(value),
                reply_markup=reply_markup
            )
        
        elif action == "keep":
            # –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
            await db.update_stars(user_id, value)
            await db.add_transaction(user_id, value, "gift_kept")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ (—ç–º–æ–¥–∑–∏ —Å–µ—Ä–¥–µ—á–∫–∞)
            await query.message.reply_text("üíù")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É —Å–Ω–æ–≤–∞!", callback_data="spin")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                KEPT_MESSAGE.format(value),
                reply_markup=reply_markup
            )
    except Exception as e:
        print(f"Error in handle_gift_decision handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        user_id = query.from_user.id
        
        stats = await db.get_user_stats(user_id)
        if not stats:
            await query.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
            return
        
        stars, total_games, total_won, biggest_win, total_spent = stats
        
        stats_text = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚≠êÔ∏è –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {stars} –∑–≤–µ–∑–¥\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
            f"üí∞ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {total_won} –∑–≤–µ–∑–¥\n"
            f"üèÜ –õ—É—á—à–∏–π –≤—ã–∏–≥—Ä—ã—à: {biggest_win} –∑–≤–µ–∑–¥\n"
            f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –∑–≤–µ–∑–¥\n"
            f"üìà –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {total_won - total_spent} –∑–≤–µ–∑–¥"
        )
        
        keyboard = [
            [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!", callback_data="spin")],
            [InlineKeyboardButton("üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(stats_text, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error in show_stats handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        keyboard = [
            [InlineKeyboardButton("üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!", callback_data="spin")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üåê –ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(WELCOME_MESSAGE, reply_markup=reply_markup)
    except Exception as e:
        print(f"Error in back_to_main handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(spin_roulette, pattern="^spin$"))
        application.add_handler(CallbackQueryHandler(handle_spin_confirmation, pattern="^confirm_spin_\d+$"))
        application.add_handler(CallbackQueryHandler(handle_spin_confirmation, pattern="^cancel_spin$"))
        application.add_handler(CallbackQueryHandler(show_stats, pattern="^stats$"))
        application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
        application.add_handler(CallbackQueryHandler(handle_gift_decision, pattern="^(sell|keep)_\d+$"))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("Bot started...")
        await application.initialize()
        await application.start()
        await application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"Error in main: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 